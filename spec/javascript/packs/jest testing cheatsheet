const n = null;
expect().toBeNull();
expect().toBeUndefined();
expect().not.toBeDefined();
expect().toBeFalsy();
expect().toBeTruthy();
expect().toBeNull()


const value = 2 + 2;
expect(value).toBeGreaterThan(3);
expect(value).toBeGreaterThanOrEqual(3.6)
expect(value).toBeLessThan(5);
expect(value).toBeLessThanOrEqual(4.5)
expect(value).toBe(4)
expect(value).toEqual(4)


const value = 0.1 + 0.2
expect(value).toBeCloseTo(0.3)

const string = "team";
test(string).not.toMatch(/I/)

const arr = ['a', 'b', 'c']

expect(arr).toContain('a')


const throw_err = ()=>{
  throw new ConfigError('you are using the wrong JDK')
}

expect(throw_err).toThrow()
expect(throw_err).toThrow(ConfigError)
expect(throw_err).toThrow('you are using the wrogn JDK')
expect(throw_err).toThrow(/JDK/)


Asynchronous code
a) use done() in a callback which will fail the test if test doesn't run the callback

b) return a promise in the test and jest will wait for that promise to resolve. If the promise is rejected, the test will automatically fail.

c)
expect.assertions(1);
return expect(Promise.resolve('yay')).resolves.toMatch('yay')

d)
test('return async rejected promise', ()=>{
  return expect(Promise.reject('shit broke')).rejects.toEqual('shit broke')
})

e)
test('rando test', ()=>{
  expect.assertions(1);
  await expect(fetchData()).resolves.toBe('peanut butter')
})



Before and After callback hook order of execution
  beforeAll(() => console.log('1 - beforeAll'));
  afterAll(() => console.log('1 - afterAll'));
  beforeEach(() => console.log('1 - beforeEach'));
  afterEach(() => console.log('1 - afterEach'));
  test('', () => console.log('1 - test'));

  describe('Scoped / Nested block', () => {
    beforeAll(() => console.log('2 - beforeAll'));
    afterAll(() => console.log('2 - afterAll'));
    beforeEach(() => console.log('2 - beforeEach'));
    afterEach(() => console.log('2 - afterEach'));
    test('', () => console.log('2 - test'));
  });

  // 1 - beforeAll
  // 1 - beforeEach
  // 1 - test
  // 1 - afterEach
  // 2 - beforeAll
  // 1 - beforeEach
  // 2 - beforeEach
  // 2 - test
  // 2 - afterEach
  // 1 - afterEach
  // 2 - afterAll
  // 1 - afterAll

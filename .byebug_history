c
@placeholder_card
c
gu.starting_card.child_card.id
gu.starting_card.id
gu = g.games_users[1]
g.games_users
g = u.current_game
g = user.current_game
game
gu
gu = u.games_users[1]
gu = u.games_user[1]
u = User.find(current_user_id)
current_user_id
Card.ids
Card.with_attached_drawing.joins(blobs: :attachments).where(medium: 'drawing')
Card.with_attached_drawing.joins(blobs: :attachments)
Card.with_attached_drawing.includes(blobs: :attachments)
Card.with_attached_drawing.join(blobs: :attachments)
c
Card.with_attached_drawing.where(uploader_id: current_user_id, starting_games_user_id: games_users.ids, medium: 'description').length
Card.with_attached_drawing.where(uploader_id: current_user_id, starting_games_user_id: games_users.ids, medium: 'description')
c
gu2.starting_card
gu2_placeholder
2787
_.id
game.get_placeholder_card gu2.user_id
c
gu1_placeholder.id
game.get_placeholder_card(gu1.user_id).id
gu1_placeholder
game.get_placeholder_card gu1.user_id
c
        expect(midgame_with_no_moves.postgame?).to eq false
        expect( JSON.parse(midgame_with_no_moves.passing_order) ).to match_array(users.pluck(:id))
users.pluck(:id)
JSON.parse(midgame_with_no_moves.passing_order)
users.ids
users.names
users.ids
users
c
    ActionCable.server.broadcast("rendezvous_#{params[:join_code]}", start_game_signal: game_page_path)
streams
params[:join_code]
@game
c
    ActionCable.server.broadcast("rendezvous_#{params[:join_code]}", start_game_signal: game_page_path)
game_page_path
Game.start_game params[:join_code]
c
@game.status
@game.users.count
c
 perform :start_game
@gu1.cards
@gu1
c
@prev_card = @placeholder_card.try(:parent_card) || Card.none
@current_user = current_user
response.status
@placeholder_card.try(:parent_card)
c
response.status
response.body
c
@placeholder_card
c
Card.where(uploader_id: current_user_id, starting_games_user_id: games_users.ids).order(:id).try(:first)
Card.where(uploader_id: current_user_id, starting_games_user_id: games_users.ids)
c
FactoryBot.create(:drawing, :placeholder)
Card.with_attached_drawing.where(uploader_id: @current_user_id)
Card.with_attached_drawing.where(uploader_id: @current_user_id, card_type: :drawing).first
Card.with_attached_drawing.where(uploader_id: @current_user_id, card_type: :drawing)
Card.with_attached_drawing.where(uploader_id: current_user_id, card_type: :drawing)
@current_user
Card.with_attached_drawing.where(uploader_id: current_user_id, card_type: :drawing, attached: true)
@game
c
    end
      @game ||= current_user.try(:current_game)
    def set_game
set_game
@game
@game.get_placeholder_card current_user.id
c
cookies.signed[:user_id]
current_user
logged_in?
c
get game_page_path
c
response.body
c
response.body
c
Game.count
Game.last
@game
c
@game.try(:pregame?)
game.try(:pregame?)
different_game_type_chosen?(params[:game_type], @game.game_type)
c
game.cards.count
gu3.starting_card.child_card.child_card
gu3.starting_card.child_card.child_card.child_card
c
gu2.starting_card.child_card.child_card.child_card
gu2.starting_card.child_card.child_card
c
gu2.starting_card.child_card
gu2.starting_card.child_card.child_card
gu1.starting_card.child_card.child_card.child_card
gu1.starting_card.child_card.child_card
gu1.starting_card.child_card
gu1.starting_card
c
killall fac
c
game.cards.count
c
gu1.starting_card
game.cards.count
c
game.cards.count
game.cards
game
Card.count
c
Card.count
c
midgame_with_no_moves.games_users
midgame_with_no_moves.users
users.pluck(:id)
c
game.user_ids.to_s
c
game.user_ids.to_s
c
expect(pregame.pregame?).to eq true
c
expect(pregame.pregame?).to eq true
pregame.pregame?
a
pregame
Card.with_attached_drawing.where( medium: :drawing).count
Card.with_attached_drawing.where( "cards.medium = 'description'")
Card.with_attached_drawing.where( medium: :drawing).count
Card.with_attached_drawing.where( "cards.medium = 'description'").count
Card.with_attached_drawing.where( "cards.medium = drawing").count
Card.with_attached_drawing.where( "cards.medium").count
Card.with_attached_drawing.where( "cards.medium LIKE drawing").count
Card.with_attached_drawing.where( "'cards'.'medium' LIKE drawing").count
Card.with_attached_drawing.where( "'cards'.'medium' LIKE 'drawing'").count
Card.with_attached_drawing.where( "'cards'.'medium' = 'drawing'").count
Card.with_attached_drawing.where( "cards.medium = 'drawing'").count
Card.with_attached_drawing.where( medium: :drawing).count
Card.with_attached_drawing.where( "medium='drawing'" ).count
Card.with_attached_drawing.where( "medium=drawing " ).count
Card.with_attached_drawing.where( "medium = 'drawing' " ).count
Card.with_attached_drawing.where( %(medium = 'drawing' ) ).count
Card.with_attached_drawing.where( %(medium = 'drawing' A) ).count
Card.with_attached_drawing.where( %(medium = 'drawing' A ) ).count
Card.with_attached_drawing.where( %(medium = 'drawing' AND drawing NOT NULL ) ).count
Card.with_attached_drawing.where( medium: :drawing).count
Card.with_attached_drawing.where( medium: :drawing, attach: true).count
Card.with_attached_drawing.where( medium: :drawing, attached: true).count
Card.with_attached_drawing.where( card_type: :drawing, attached: true).count
Card.with_attached_drawing.where( card_type: :drawing, attached: true)
Card.with_attached_drawing.where(uploader_id: current_user.id, card_type: :drawing, attached: true)
Card.with_attached_drawing.where(uploader_id: current_user_id, card_type: :drawing, attached: true)
@game.get_placeholder_card current_user.id
c
cc
c
game.reload
game
c
 users.count
c users.count
c
current_user.current_game.try(:status) == 'midgame'
 current_user.current_game.try(:status) == 'midgame'
c
Game.find(game_id)
response
Game.ids
c
get leave_pregame_path
c
response.status
current_user
game.reload
game
c
game.scheduled_for_destruction
game.persisted?
game.deleted?
game
c
    ((params_game_type != game__game_type ) && (params_game_type == 'private' || game__game_type == 'private'))
    game__game_type == 'private')
(params_game_type == 'private' ||
(params_game_type != game__game_type ) 
    game__game_type == 'private'))
    (params_game_type == 'private' ||
    ((params_game_type != game__game_type ) &&
    game__game_type == 'private'))
    (params_game_type == 'private' ||
    ((params_game_type != game__game_type ) &&
    game__game_type == 'private')
    (params_game_type == 'private' ||
    (params_game_type != game__game_type ) &&
    game__game_type == 'private'
    params_game_type == 'private' ||
(params_game_type != game__game_type ) &&
(params_game_type != game__game_type )
game__game_type
params_game_type
continue
c
params_game_type != game__game_type
@game.game_type
params[:game_type]
c
current_user.gamesc
current_user.games
current_user.current_game
              game.reload
Game.last.users
Game.last
current_user.current_game
current_user
c
 params[:game_type]
case params[:game_type]
c
rspec ./spec/requests/rendezvous_controller_spec.rb:288
continue
c
params[:game_type]
c
current_user.games
current_user
current_user.current_game
continue
c
Game.count
Game.all
c
response
c

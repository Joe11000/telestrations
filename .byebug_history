continue
c
 game.games_users.ids
gu1
gu1, gu2, gu3 = game.games_users
continue
c
gu1.starting_card
continue
c
gu2.c
gu1
gus.ids
gus
gu1.starting_card
gu1
continue
c
continue
c
                expect(response.body).to match(/Join Code : .{,100}>#{other_game.join_code}</)
c
                expect(response.body).to match(/Join Code : .{,100}>#{other_game.join_code}</)
                expect(response.body).to match(/Join Code : .{,10}>#{other_game.join_code}</)
other_game.join_code
@game.join_code
game.join_code
response.body
c
subscription.params
subscription
methods.sort - Object.methods
instance_variables
data[:partial]
@game.users.count
data[:partial]
c
users_on_page.length
local_assigns
clocal_assigns[:users_joined]
c
continue
c
continue
c
methods.grep(/to/)
methods.grep(/trav/)
methods.grep(/travel/)
methods.grep(/travel/
travel
travel_to
c
expect(current_user.current_game).to eq last_game
last_game
continue
c
Game.last
c
subject
c
response.body
response.body.match(/.*JGVK.*/)
response.body.match(/JGVK/)
game.join_code
response.body.match(/#{game.join_code.upcase}/)
response.body.match(/Join Code :.*#{game.join_code.upcase}/)
response.body.match(/Join Code :.{,100}#{game.join_code.upcase}/)
response.body.match(/Join Code :.{,100}>#{game.join_code.upcase}/)
response.body.match(/Join Code :.{,100}>#{game.join_code.upcase}</)
c
response.location
response.methods.sort - Object.methods
response.location
response.current_page
response.current_path
response.body
response
page
c
expect(response.body).to match(/track/)
expect(response.body).to match(\track\)
expect(response.body).to match \track\
response.body
c
cookies[:user_id] = cook[:user_id]
cook.signed[:user_id] = FactoryBot.create(:user).id
cook = ActionDispatch::Request.new(Rails.application.env_config.deep_dup).cookie_jar
cook ActionDispatch::Request.new(Rails.application.env_config.deep_dup).cookie_jar
 ActionDispatch::Request.new(Rails.application.env_config.deep_dup).cookie_jar
cookies.methods.grep /sign/
cookies.methods.grep /enc/
cookies.encrypted
cookies.signed
cookies[:user_id] = game.users.first.id
game = FactoryBot.create(:game, :pregame)
cookies
c
        cookies[:user_id] = FactoryBot.create(:user).id
cookies.signed[:user_id]
cookies[:signed]
cookies
c
x
cookies
cookies.sign
cookies.signed
c
cookies
sessions
session
session[:user_id]
c
local_assigns[:users_joined] = User.none
local_assigns[:users_joined].try(:each_slice, 3)
c
local_assigns[:users_joined] = User.none
local_assigns[:users_joined]
local_assigns[:users_joined].try(:each_slice, 3)
c
local_assigns[:users_joined].try(:each_slice, 3)
c
local_assigns[:users_joined].try(:each_slice, 3)
c
local_assigns[:users_joined].try(:each_slice, 3)
c
local_assigns[:users_joined]
local_assigns[:users_joined].each_slice(3)
c
local_assigns[:users_joined].each_slice(3)
local_assigns[:users_joined]
c
local_assigns[:users_not_joined].try(length)
c
local_assigns[:users_joined].try(:length)
#{local_assigns[:users_joined].try(:length)}
local_assigns[:users_not_joined].length
local_assigns
local_assingns
local_assings
c
local_assigns[:users_on_page].length
local_assigns
local_assigns[:users_waiting].length
local_assigns[:users_waiting]
c
list
c
local_assigns[:users_on_page]c
local_assigns
local_assigns[:users_on_page]
c
continue
c
streams
stream
c
current_user_game.try(:id) == params[:game_id]
c
streams
params
streams
c
a.source_location
a.parameters
a.owner
a.source
a.methods.sort - Object.methods
a = cookies.method :get_cookie
m = cookies.method :get_cookie
cookies.method :get_cookie
cookies.get_cookie
cookies.methods.sort - Object.methods
cookies.methods
cookies.encrypt
cookies.encrypted
cookies.signed
cookies
c
expect(response).to redirect_to login_path
response
get game_page_path
c
current_user.current_game
current_user
params
c
cc
c
transmissions
c
      #
c
Faker::Name.first_namec
Faker::Name.first_name
Faker::Name.firstname
Faker::Name
Faker::Name.first
streams
streams.reload!
streams.reload
streams
          subscribe join_code: @game_1.join_code
streams
          subscribe join_code: @game_1.join_code
streams
          subscribe join_code: @game_2.join_code
          subscribe join_code: @game_1.join_code
streams
c
          subscribe join_code: @game_1.join_code
c
streams
          }.not_to have_broadcasted_to("rendezvous_#{@game_2.join_code}")
            subscribe join_code: @game_2.join_code
          expect {
          streams
          @game_2 = FactoryBot.create :game, :pregame
          streams
          @game_1.start_game
          streams
perform :join_game, ({users_game_name: 'Kirmit the Yoda', action: :join_game})
          streams
c
@game_2.users.map(&:current_games_user_name)
@game_1.users.first.games_users
@game_1.users.first.games_user
@game_1.users
c
unassociated_rendezousing_games_users
users.map(&:current_games_user_name)unassociated_rendezousing_games_users
@game.reload
@game.reload!
@game.reload
users.map(&:current_games_user_name)
 unassociated_rendezousing_games_users.destroy_all
users.map(&:current_games_user_name)
users.map(&:current_games_users_name)
users.current_games_users_name
users.current_games_user_name
users
self
c
game
@game
c
streams
steams
c
game.users
 game.blank? || !game.pregame?
game = Game.find_by(join_code: params[:join_code])
kill_switch
c
users
unassociated_rendezousing_games_users.destroy_all
cgame

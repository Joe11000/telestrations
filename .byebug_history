c
response.body
c
response.body
c
Game.count
Game.last
@game
c
@game.try(:pregame?)
game.try(:pregame?)
different_game_type_chosen?(params[:game_type], @game.game_type)
c
game.cards.count
gu3.starting_card.child_card.child_card
gu3.starting_card.child_card.child_card.child_card
c
gu2.starting_card.child_card.child_card.child_card
gu2.starting_card.child_card.child_card
c
gu2.starting_card.child_card
gu2.starting_card.child_card.child_card
gu1.starting_card.child_card.child_card.child_card
gu1.starting_card.child_card.child_card
gu1.starting_card.child_card
gu1.starting_card
c
killall fac
c
game.cards.count
c
gu1.starting_card
game.cards.count
c
game.cards.count
game.cards
game
Card.count
c
Card.count
c
midgame_with_no_moves.games_users
midgame_with_no_moves.users
users.pluck(:id)
c
game.user_ids.to_s
c
game.user_ids.to_s
c
expect(pregame.pregame?).to eq true
c
expect(pregame.pregame?).to eq true
pregame.pregame?
a
pregame
Card.with_attached_drawing.where( medium: :drawing).count
Card.with_attached_drawing.where( "cards.medium = 'description'")
Card.with_attached_drawing.where( medium: :drawing).count
Card.with_attached_drawing.where( "cards.medium = 'description'").count
Card.with_attached_drawing.where( "cards.medium = drawing").count
Card.with_attached_drawing.where( "cards.medium").count
Card.with_attached_drawing.where( "cards.medium LIKE drawing").count
Card.with_attached_drawing.where( "'cards'.'medium' LIKE drawing").count
Card.with_attached_drawing.where( "'cards'.'medium' LIKE 'drawing'").count
Card.with_attached_drawing.where( "'cards'.'medium' = 'drawing'").count
Card.with_attached_drawing.where( "cards.medium = 'drawing'").count
Card.with_attached_drawing.where( medium: :drawing).count
Card.with_attached_drawing.where( "medium='drawing'" ).count
Card.with_attached_drawing.where( "medium=drawing " ).count
Card.with_attached_drawing.where( "medium = 'drawing' " ).count
Card.with_attached_drawing.where( %(medium = 'drawing' ) ).count
Card.with_attached_drawing.where( %(medium = 'drawing' A) ).count
Card.with_attached_drawing.where( %(medium = 'drawing' A ) ).count
Card.with_attached_drawing.where( %(medium = 'drawing' AND drawing NOT NULL ) ).count
Card.with_attached_drawing.where( medium: :drawing).count
Card.with_attached_drawing.where( medium: :drawing, attach: true).count
Card.with_attached_drawing.where( medium: :drawing, attached: true).count
Card.with_attached_drawing.where( card_type: :drawing, attached: true).count
Card.with_attached_drawing.where( card_type: :drawing, attached: true)
Card.with_attached_drawing.where(uploader_id: current_user.id, card_type: :drawing, attached: true)
Card.with_attached_drawing.where(uploader_id: current_user_id, card_type: :drawing, attached: true)
@game.get_placeholder_card current_user.id
c
cc
c
game.reload
game
c
 users.count
c users.count
c
current_user.current_game.try(:status) == 'midgame'
 current_user.current_game.try(:status) == 'midgame'
c
Game.find(game_id)
response
Game.ids
c
get leave_pregame_path
c
response.status
current_user
game.reload
game
c
game.scheduled_for_destruction
game.persisted?
game.deleted?
game
c
    ((params_game_type != game__game_type ) && (params_game_type == 'private' || game__game_type == 'private'))
    game__game_type == 'private')
(params_game_type == 'private' ||
(params_game_type != game__game_type ) 
    game__game_type == 'private'))
    (params_game_type == 'private' ||
    ((params_game_type != game__game_type ) &&
    game__game_type == 'private'))
    (params_game_type == 'private' ||
    ((params_game_type != game__game_type ) &&
    game__game_type == 'private')
    (params_game_type == 'private' ||
    (params_game_type != game__game_type ) &&
    game__game_type == 'private'
    params_game_type == 'private' ||
(params_game_type != game__game_type ) &&
(params_game_type != game__game_type )
game__game_type
params_game_type
continue
c
params_game_type != game__game_type
@game.game_type
params[:game_type]
c
current_user.gamesc
current_user.games
current_user.current_game
              game.reload
Game.last.users
Game.last
current_user.current_game
current_user
c
 params[:game_type]
case params[:game_type]
c
rspec ./spec/requests/rendezvous_controller_spec.rb:288
continue
c
params[:game_type]
c
current_user.games
current_user
current_user.current_game
continue
c
Game.count
Game.all
c
response
c
pp @cards
@cards
c
starting_card3.uploader.games_users.last.users_game_name
starting_card3.uploader.games_users.lastusers_game_name
starting_card3.uploader.games_users.last
starting_card3.uploader.games_users
starting_card3.uploader
starting_card3
@game.games_users.pluck(:users_game_name)
pp cards
pp  expected_result
 expected_result
 expected_result[2][2]
@cards[2][2] 
@cards[2][2] == expected_result[2][2]
@cards[2][1] == expected_result[2][1]
@cards[2][0] == expected_result[2][0]
@cards[2] == expected_result[2]
] == expected_result[1]
 expected_result[1][2][1]
[A
@cards[1][2][1] == expected_result[1][2][1]
@cards[0][2][1] == expected_result[0][2][1]
@cards[0][1][1] == expected_result[0][1][1]
@cards[0][1][0] == expected_result[0][1][0]
@cards[0][0][1] == expected_result[0][0][1]
@cards[0][0][0] == expected_result[0][0][0]
expected_result[0][0][0]
@cards[0][0][0]
@cards[0][0]
c
c@cards.first[0][0]
@cards.first[0][0]
@cards.first[0]
@cards.first
c
Hash[ @game.games_users.map{|gu| [&:users_game_names)]
Hash[ @game.games_users.pluck(:id, :user_id)]
Hash.new @game.games_users.pluck(:id, :user_id)
@game.games_users.pluck(:id, :user_id)
@game.games_users.pluck(:id)
gu1.pluck(:user_id)
gu1.(:uploader_id, :u
gu1.only(:user_id, :users_game_name)
gu1.select(:user_id, :users_game_name)
gu1.pluck(:user_id, :users_game_name)
@game.games_users.pluck(:users_game_name)
@game.games_user_ids
gu1.starting_card.uploader.users_game_name
gu1.starting_card.uploader
gu1.starting_card
        gu1, gu2, gu3 = @game.games_users
first_starting_card.uploader        gu1, gu2, gu3 = @game.games_users
first_starting_card.uploader
@game.games_users.first
@game.games_users
@cards
@game.games_users.pluck(:users_game_name)
c
current_user.current_games_user_name
c
current_user
current_user.current_game
c
@games_user2.starting_card.id
@games_user2.starting_card.child_card.id
@games_user2.cards.ids
@games_user2.cards.map(&:id)
@games_user2.cards
@games_user2.starting_card.child_card
@games_user2.starting_card
@games_user2
c
Game.all_users_game_names game.join_code
game.join_code
game.unassociated_rendezousing_games_users
game = Game.find_by(join_code: join_code)
c
